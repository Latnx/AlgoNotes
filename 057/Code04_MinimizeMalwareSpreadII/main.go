package main

import (
	"sort"
)

// 尽量减少恶意软件的传播 II
// 测试链接 : https://leetcode.cn/problems/minimize-malware-spread-ii/
// 并查集
var arr []int

// 病毒点: 如果一个集合有病毒, 就设置下标, 超过一个设置-2, 没有设置-1
var infect []int

// 集合大小
var setNum []int

// 病毒下标
var setInitial map[int]struct{}

// save多少节点
var save []int

func find(i int) int {
	if arr[i] != i {
		arr[i] = find(arr[i])
	}
	return arr[i]
}
func union(x, y int) {
	findX, findY := find(x), find(y)
	if findX == findY {
		return
	}
	arr[findX] = findY
	setNum[findY] += setNum[findX]
	setNum[findX] = 0
}

func minMalwareSpread(graph [][]int, initial []int) int {
	arr = make([]int, len(graph))
	infect = make([]int, len(graph))
	setNum = make([]int, len(graph))
	// 集合无关
	setInitial = make(map[int]struct{})
	save = make([]int, len(graph))

	for i := range arr {
		arr[i] = i
		setNum[i] = 1
		infect[i] = -1
	}
	for _, val := range initial {
		setInitial[val] = struct{}{}
	}
	// 将i集合连接到j
	for i := range graph {
		for j := 0; j < len(graph[0]); j++ {
			if graph[i][j] == 1 {
				_, oki := setInitial[i]
				_, okj := setInitial[j]
				if !oki && !okj {
					union(i, j)
				}
			}
		}
	}
	// 标记感染集合
	for _, v := range initial {
		for i := range graph[v] {
			if graph[v][i] == 1 && v != i {
				if _, ok := setInitial[i]; !ok {
					fn := find(i)
					if infect[fn] == -1 {
						infect[fn] = v
					} else if infect[fn] != -2 && infect[fn] != v {
						infect[fn] = -2
					}
				}
			}
		}
	}
	// 统计只有一个感染点的集合
	for i, val := range infect {
		if val != -1 && val != -2 {
			save[val] += setNum[i]
		}
	}
	// 统计感染点拯救大小
	sort.Ints(initial)
	maxVal := -1
	res := initial[0]
	for _, val := range initial {
		if save[val] > maxVal {
			maxVal = save[val]
			res = val
		}
	}
	return res
}

func main() {
	minMalwareSpread([][]int{{1, 1, 0}, {1, 1, 1}, {0, 1, 1}}, []int{0, 1})
}
